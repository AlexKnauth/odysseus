#lang racket

(module+ test

  (require rackunit)
  (require "../type.rkt")

  (check-pred scalar? 1)
  (check-pred scalar? 0.3)
  (check-pred scalar? "key")
  (check-pred scalar? 'key)
  (check-pred scalar? null)
  (check-equal? (scalar? (list 1)) #f)
  (check-equal? (scalar? (hash)) #f)
  (check-equal? (scalar? (hash 'a 1 'b 2)) #f)

  (check-pred cons? (cons 1 2))
  (check-equal? (cons? (list 1 2)) #f)
  (check-equal? (cons? (list 1)) #f)
  (check-equal? (cons? (list)) #f)

  (check-pred cons-ext? (cons 1 2))
  (check-equal? (cons-ext? (list 1 2)) #t)
  (check-equal? (cons-ext? (list 1)) #t)
  (check-equal? (cons-ext? (list)) #f)

  (check-pred list2? '(()))
  (check-pred list2? '((1)))
  (check-pred list2? '((1 2 3 4)))
  (check-pred list2? '((1 2 3 4) (3 4 5) (8 9)))
  (check-pred list2? '(((9))))
  (check-pred list2? '((1 2 3 4) ((3 4 5) (8 9))))

  (check-false (list2? '((1 2 3 4) (3 4 5) 10 (8 9))))

  (check-pred list-of-cons? (list (cons 1 2) (cons 4 5)))
  (check-equal? (list-of-cons? (list (cons 1 2) (cons 4 5) 10)) #f)
  (check-equal? (list-of-cons? '((1 2) (4 5))) #f)

  (check-equal? (type 3) 'number)
  (check-equal? (type "a str") 'string)
  (check-equal? (type #"a str") 'bytes)
  (check-equal? (type '((a 10) (b 20))) 'alist)
  (check-equal? (type (list (cons 1 2) (cons 3 4))) 'list-of-cons)
  (check-equal? (type '((a 10) (b 20 30))) 'list2)
  (check-equal? (type (list '(a 10) '(b 20 30) null)) 'list2)
  (check-equal? (type '((a 10) (b 20 30) 3)) 'list)
  (check-equal? (type '(1 2 3)) 'list)
  (check-equal? (type (cons 1 2)) 'pair)
  (check-equal? (type #\a) 'char)
  (check-equal? (type #\λ) 'char)
  (check-equal? (type #\u0011) 'char)
  (check-equal? (type 'a) 'symbol)
  (check-equal? (type (λ (x) x)) 'procedure)
  (check-equal? (type odd?) 'procedure)
  (check-equal? (type #'(+ 1 2)) 'syntax)
  (check-equal? (type #(1 2 3)) 'vector)
  (check-equal? (type (hash 'a 10 'b 20)) 'hash)
  (check-equal? (type (current-directory)) 'path)

  (check-equal? (->number 123) 123)
  (check-equal? (->number 123.789) 123.789)
  (check-equal? (->number "123a") 123)
  (check-equal? (->number "a123") 123)
  (check-= (->number "123.54") 123.54 1e-5)
  (check-= (->number "123,54") 123.54 1e-5)
  (check-= (->number "2 850,40") 2850.4 1e-5)
  (check-equal? (->number "#f") 0)
  (check-equal? (->number "0") 0)
  (check-equal? (->number "00") 0)

  (check-equal? (->int "3.5") 3)
  (check-equal? (->int "3,5") 3)
  (check-equal? (->int "3") 3)
  (check-equal? (->int "2 850,40") 2850)

  (check-true (atom? 3))
  (check-true (atom? "abcdef"))
  (check-false (atom? (cons 1 2)))
)
