(require "../graphics/geometry.rkt")

;(define points '((100 . 100) (150 . 120) (200 . 80) (400 . 500)))
(define points '((500 . 700) (490 . 690) (460 . 680) (461 . 740) (300 . 200) (800 . 100) (850 . 150) (852 . 150) (900 . 100) (950 . 150)))
;(define points '((100 . 200) (200 . 100) (300 . 200)))
(define smoothed-points (points->smoothed-points points #:fct 0.3))
(define smooth-path (points->smooth-path points #:fct 0.3))

(.svg
  (str
    (for/fold
      ((s (circle 'r 2 'cx (first smoothed-points) 'cy (second smoothed-points) 'style "fill: black;")))
      ((p (partition (ltrim smoothed-points 4) 6)))
      (str
        s
        (line 'x1 (nth p 1) 'y1 (nth p 2) 'x2 (nth p 3) 'y2 (nth p 4) 'style "stroke: red; stroke-width: 0.5")
        (line 'x1 (nth p 3) 'y1 (nth p 4) 'x2 (nth p 5) 'y2 (nth p 6) 'style "stroke: red; stroke-width: 0.5")
        (circle 'r 2 'cx (nth p 1) 'cy (nth p 2) 'style "fill: red; opacity: 0.8")
        (circle 'r 2 'cx (nth p 3) 'cy (nth p 4) 'style "fill: black;")
        (circle 'r 2 'cx (nth p 5) 'cy (nth p 6) 'style "fill: red; opacity: 0.8")))
      ; end point
      (let ((xend (nth smoothed-points -2))
            (yend (nth smoothed-points -1))
            (cendx (nth smoothed-points -4))
            (cendy (nth smoothed-points -3)))
        (str
          (circle 'r 2 'cx xend 'cy yend 'style "fill: black;")
          (circle 'r 2 'cx cendx 'cy cendy 'style "fill: red; opacity: 0.8")
          (line 'x1 xend 'y1 yend 'x2 cendx 'y2 cendy 'style "stroke: red; stroke-width: 0.5")))
    (path
      'd smooth-path
      'style "stroke: black; stroke-width: 1; opacity: 0.5")))
