#lang racket

(module+ test

  (require rackunit)
  (require "../../sbgn/er.rkt")

  (define PCR
    (sbgn:er

      ; entities:
      (entity Sense (parameters :exist #f @entity-type 'mt:dna))
      (entity Antisense (parameters :exist #f @entity-type 'mt:dna))
      (entity Primer-3 (parameters @entity-type 'mt:dna))
      (entity Primer-5 (parameters @entity-type 'mt:dna))
      ;
      (perturbing-agent Heat)
      ;;
      ;;; relationships:
      (interaction i1 (Sense Primer-3))
      (interaction i2 (Antisense Primer-5))
      (interaction i3 (Sense Antisense))

      ;(absolute-inhibition foo [(or i1 i2) i3])
      (absolute-inhibition ai6 (i1 i3))
      (absolute-inhibition ai7 (i2 i3))

      (absolute-inhibition ai4 (i3 i1))
      (absolute-inhibition ai5 (i3 i2))
      (absolute-inhibition ai1 (Heat i1))
      (absolute-inhibition ai2 (Heat i2))
      (absolute-inhibition ai3 (Heat i3))
      (necessary-stimulation ns1 (i1 assign2))
      (necessary-stimulation ns2 (i2 assign1))
      (assignment assign1 (#t Sense:exist))
      (assignment assign2 (#t Antisense:exist))
    ))

    (check-equal?
      (experiment PCR (start Heat) (probe Antisense : :exist))
      #f)
    (check-equal?
      (experiment PCR (start Heat) (probe i3 state))
      'blocked)
    (check-equal?
      (experiment PCR (start Heat) (probe assign2 state))
      'blocked)
    (check-equal?
      (experiment PCR (start) (probe assign2 state))
      'exists)
    (check-equal?
      (experiment PCR (start) (probe i2 state))
      'blocked)
    (check-equal?
      (experiment PCR (start Heat) (probe ns2 state))
      'blocked)
    (check-equal?
      (experiment PCR (start Heat) (probe assign1 state))
      'blocked)
    (check-equal?
      (experiment PCR (start) (probe ns2 state))
      'blocked)
    (check-equal?
      (experiment PCR (start) (probe Heat state))
      'not-exists)
    (check-equal?
      (experiment PCR (start) (probe ai2 state))
      'not-exists)
    (check-equal?
      (experiment PCR (start) (probe ns1 state))
      'blocked)
    (check-equal?
      (experiment PCR (start) (probe assign1 state))
      'exists)
    (check-equal?
      (experiment PCR (start) (probe Sense : :exist))
      #t)
    (check-equal?
      (experiment PCR (start) (probe Antisense : :exist))
      #t)
)
